How to use:
 To use the compiler in a terminal write:
  compiler [input file path] [output file path]
 the output file path extension must be:
    *.c to generate C code or
    *.asm to generate NASM code
 otherwise it will throw an error and not compile the code

Operators:
 associativity is allways left to right
 the binary operator precedence are:
  +	0
  -	0
  %	1
  *	2
  /	2
  ^	3

Variables:
-Declaration:
 -Syntax:
   var_name : = expr ;
  You can not declare two variables with the same name

 You can not use a variable which has not been declared

-Assignment:
 -Syntax:
   var_name = expr;
 The variable must hav been declared to assign a value to it

-Scopes:
 -Syntax:
   "{" + staments + "}"
  Scopes without staments are valid
 All the variables declared inside a scope will be delete when the scope ends
 Declaring a variable with the same name as another outside the scope is not allowed
 Scopes can be recursive

-Conditionals:
 -Syntax:
   "if" + condition + scope
 The scope must be a valid scope
 The result of the condition expression will be treated as a boolean value;
 if it is 0 the scope will not be executed otherwise it will

-Loops:
 -While:
  -Syntax:
   "while" + condition + scope
  The value of the condition will be treated as boolean
  the scope will execute while the condition returns true

-Input/Output:
 The IO is not standardized yet
 -Printing:
   this only works for targetting C compilation
   -Syntax:
     "print" + expr + ";"
   evaluates the expression and the lower 8 bits of the value will be printed using printf()

-Exiting:
 -Syntax:
  "exit" + expr + ";"
 The program will end when this statement is executed, returning the expr as an exit code
