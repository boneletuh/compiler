How to use:
 To use the compiler in a terminal write:
  compiler [input file path] [output file path]
 the output file path extension must be:
    *.c to generate C code or
    *.asm to generate NASM code
 otherwise it will throw an error and not compile the code.

Operators:
 The brackets always evaluate first.
 Associativity is always left to right,
 The binary operator precedences are:
  >		0
  ==  0
  <		0
  +		1
  -		1
  %		2
  *		2
  /		2
  ^		3
 The unary operator precedences are:
  &   4
  *   4

 Can not operate with a pointer.
 The addition `+`, substraction `-`, multiplication `*` and division `/`
  are normal unsigned integer arithmetic operations.
 The get address operator `&` returns the addres of its operand which has to be a variable.
 The dereference operator `*` returns the value its operand was pointing to, the operand has to be a pointer.

Types:
-The types are used in variable declarations to allow the compiler to use the right operations
  and manage the memory correctly.
-The main data types are:
  u64 - 8 bytes - unsigned integer
-There are also other types decorators that can be used along side a main type:
  ptr - 8 bytes - unsigned integer - a value that points to another data type
  [N] - N * size of the type it contains - an array has a collection of elements of the same type
   N can not be 0

Variables:
-Declaration:
 -Syntax:
   var_name : type = expr ;
 Two variables with the same name can not be declared.
 A variable which has not been declared can not be used.
 The type of the declaration must match the type of the expression

-Assignment:
 -Syntax:
   var_name = expr;
 The variable must have been declared to assign a value to it.
 The type of the expression must match the type given before to the variable

Scopes:
-Syntax:
  "{" + staments + "}"
  Scopes without staments are valid.
 All the variables declared inside a scope will be delete when the scope ends.
 Declaring a variable with the same name as another outside the scope is not allowed.
 Scopes can be recursive.

Conditionals:
-Syntax:
  "if" + condition + scope + ("else" + scope)
 The result of the condition expression will be treated as a boolean value;
 if the result of the expression is non zero the scope will be executed, otherwise,
 if there is an "else" statement following it will be executed.

Loops:
-While:
 -Syntax:
  "while" + condition + scope
 The value of the condition will be treated as boolean.
 The scope will execute while the condition returns a non zero value.

Input/Output:
 The IO is not standardized yet.
-Printing:
 -Syntax:
   "print" + expr + ";"
 Evaluates the expression and the lower 8 bits of the value will be printed using its ASCII representation.

Exiting:
-Syntax:
 "exit" + expr + ";"
 When this statement is executed the program will end, returning the expr value as an exit code.
